sort features :
  1.node sort.js fileName 
  2.node sort.js -n fileName
  3.node sort.js -r fileName
  5.node sort.js -u fileName
  6.node sort.js -o outputFile fileName
  7.node sort.js -k 2 fileName
  8.node sort.js -t',' -k2 fileName
  9.cat fileName|node sort
  10.sort

individual tasks

v 0.1 :
  1.node sort.js fileName
  create all needed files & folders=> src,test,sort.js
  get required packages => mocha,chai
  make the connections between the files

  [0.1] The last step
output => text: LinesToDisplay
    abc
    bcd
    cde
input => array: sortedLines
    [abc,bcd,cde]
name => displayArrangedLines

-----------------------------------------------------

[0.2] The previous step
output => array : sortedLines
    [abc,bcd,cde]
input => array : totalLines
    [bcd,abc,cde]
name => sortFileOnOptions

-----------------------------------------------------

[0.3a] The previous step
output => array : totalLines
    [bcd,abc,cde]
input => string : contentOfFile
    "bcd\nabc\n cde"
name => parseContentOfFile

-----------------------------------------------------

[0.3b] The previous step
output => stderr : error message
    "file not found"
input => path : filePath
    one.text
name => DisplayErrorMessage

-----------------------------------------------------
[0.4] The previous step
output => string : contentOfFile
    "bcd\nabc\n cde"
input => object : requiredArgs
    {fileName:fileName,options:[]}
name => loadFileContent

------------------------------------

[0.5] The previous step
output =>  object : requiredArgs
    {fileName:fileName,options:[]}
input => ArrayOfStrings : cmdArgs
    ["one.txt"]
name => parseUserArgs
